// -------------------------------------------
// 			Generics
// -------------------------------------------

struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn new(x: T, y: U) -> Point<T, U> {
        Point { x, y }
    }
}

impl Point<i32, i32> {
    fn printing(&self) {
        println!("The values of the coordinates are {}, {}", self.x, self.y);
    }

    fn new_1(x: i32, y: i32) -> Point<i32, i32> {
        Point { x, y }
    }
}

impl Point<f64, f64> {
    fn printing(&self) {
        println!("The values of the coordinates are {}, {}", self.x, self.y);
    }
}

fn add_points<T, U>(p1: &Point<T, U>, p2: &Point<T, U>) -> Point<T, U> {
    unimplemented!();
}

fn add_points_i32(p1: &Point<i32, i32>, p2: &Point<i32, i32>) -> Point<i32, i32> {
    unimplemented!();
}

fn add_points_f64(p1: &Point<f64, f64>, p2: &Point<f64, f64>) -> Point<f64, f64> {
    unimplemented!();
}

fn main() {
    let origin = Point::new(0, 0);
    let p1 = Point::new(1.0, 4.0);

    let p2 = Point::new(5, 5.0);

    origin.printing();
    // p1.printing();

    add_points(&origin, &origin); // add_points_i32(&origin, &origin);
    add_points(&p1, &p1); // add_points_f64(&p1, &p1);
}

// Problem 1: Define a generic enum named 'Operation' that represents basic mathematical operations
// (e.g., Addition, Subtraction, Multiplication, Division).
// Each variant should store two values of the same type.
/*
Define enum here
*/
fn main() {
    let op_1 = Operation::Addition(5, 10);
    let op_2 = Operation::Multiplication(3.5, 2.0);
    let op_3 = Operation::Subtraction(3.5, 2.0);
    let op_4 = Operation::Division(2, 3);
}
// Solution
enum Operation<T> {
    Addition(T, T),
    Multiplication(T, T),
    Subtraction(T, T),
    Division(T, T),
}
fn main() {
    let op_1 = Operation::Addition(5, 10);
    let op_2 = Operation::Multiplication(3.5, 2.0);
    let op_3 = Operation::Subtraction(3.5, 2.0);
    let op_4 = Operation::Division(2, 3);
}

// Problem 2: Fix the code below so that it compiles
struct Container<T> {
    value: T,
}
impl<T> Container<T> {
    fn create(value: T) -> Container<T> {       // something wrong here
        Container { value }
    }
}
impl Container<i32> {
    fn display(&self) {
        println!("The value inside the container is: {}", self.value);
    }

    fn create(value: i32) -> Container<i32> {
        Container { value }
    }
}
fn main(){}
//Solution
struct Container<T> {
    value: T,
}
impl<T> Container<T> {
    fn new(value: T) -> Container<T> {   // we need to remove duplicate definitions for create fn
        Container { value }
    }
}
impl Container<i32> {
    fn display(&self) {
        println!("The value inside the container is: {}", self.value);
    }

    fn create(value: i32) -> Container<i32> {
        Container { value }
    }
}

fn main() {}

// Problem 3: Generalize the function take_and_return() so that the it can accept any type.
struct User {
    name: String,
    id: u32,
}
fn take_and_return(user: User) -> User { // this line needs updation
    user
}
fn main() {
    let user1 = User {
        name: "Alice".to_string(),
        id: 199,
    };
    let _user2 = take_and_return(user1);

    let str1 = String::from("Hello folks");
    let _str2 = take_and_return(str1); // we want this to compile
}
//Solution
struct User {
    name: String,
    id: u32,
}
fn take_and_return<T>(user: T) -> T {
    user
}
fn main() {
    let user1 = User {
        name: "Alice".to_string(),
        id: 199,
    };
    let _user2 = take_and_return(user1);

    let str1 = String::from("Hello folks");
    let _str2 = take_and_return(str1); // we want this to compile
}