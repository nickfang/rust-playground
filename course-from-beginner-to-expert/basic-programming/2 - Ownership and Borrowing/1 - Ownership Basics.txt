// -------------------------------------------
// 	Ownership Basics
// -------------------------------------------

/*
1.	Each value has a variable that's its "owner."
2.	A value can have only one owner at a time.
3.	If the owner goes out of scope, the value is cleaned up.
*/

fn main() {
    let s1 = String::from("world");
    {
        let s2 = s1;
    }
    //println!("s1 is: {s2}"); // error: cannot find s2 in scope
    let s2 = s1;  // s1 is no longer an owner and doesn't have a value.

    // primitive types are stored in the stack so an assignment makes a copy. (int, floats, bools and chars)
    let x = 15;
    let y = x;
    println!("x is: {x}");
}

// Programs Memory Layout (volitile)
// |  Stack | => Deals with data, since size is known is stored in order
// |        |
// |        |
// |   Heap | => Deals with unknown size data at compile time.  Slow and requires a lot of memory management.
// ----------
// | Static |  => Binary instructions and static variables, populated with revelant program data it starts up and ends.  Cleanup automatic


// Problem 1: Fix the code below so that it compiles
fn main() {
    let s1: String = String::from("this is me, ");
    let s2: &str = "Nouman";
    some_function(s1, s2);
    println!("{} {}", s1, s2);
}

fn some_function(a1: String, a2: &str) {  // update the first input to a reference String
    println!("{} {}", a1, a2);
}

// Solution 1:
fn main() {
    let s1: String = String::from("this is me, ");
    let s2: &str = "Nouman";
    some_function(&s1, s2);
    println!("{} {}", s1, s2);
}

fn some_function(a1: &String, a2: &str) {  // update the first input to a reference String
    println!("{} {}", a1, a2);
}
// Solution 2:
fn main() {
    let s1: String = String::from("this is me, ");
    let s2: &str = "Nouman";
    some_function(s1.clone(), s2); // Pass a clone to the function
    println!("{} {}", s1, s2);
}

fn some_function(a1: String, a2: &str) {
    println!("{} {}", a1, a2);
}


// Problem 2:
/*
Fix the code below. By solving this problem you will be able to understand
the change of ownership inside a loop
*/

fn main() {
    let mut my_vec = vec![1, 2, 3, 4, 5];
    let mut temp;

    while !my_vec.is_empty() {
        temp = my_vec; // Something wrong on this line
        println!("Elements in temporary vector are: {:?}", temp);


        if let Some(last_element) = my_vec.pop() { // pop() is used to remove an element from the vec
            println!("Popped element: {}", last_element);
        }
    }
}
// Solution:
/*
Fix the code below. By solving this problem you will be able to understand
the change of ownership inside a loop
*/

fn main() {
    let mut my_vec = vec![1, 2, 3, 4, 5];
    let mut temp;

    while !my_vec.is_empty() {
        temp = my_vec.clone(); // during the first iteration, the transfer of ownership occurs from my_vec to that of temp, which makes it impossible to access the variable my_vec in subsequent iterations
        println!("Elements in temporary vector are: {:?}", temp);


        if let Some(last_element) = my_vec.pop() {
            println!("Popped element: {}", last_element);
        }
    }
}


// Problem 3: Fix the code so that it compiles.
fn main() {
    {
        let str1 = generate_string();
    };
    let _str2 = str1;   // Something wrong with this line
}

fn generate_string() -> String {
    let some_string = String::from("I will generate a string");
    some_string
}

// Solution:
fn main() {
    let str1 = {
        let str1 = generate_string();
        str1
    };


    // An alternate solution would be to move the statement
    // let str1 = generate_string(); out of the scope

    let str2 = str1;   // Something wrong with this line
}

fn generate_string() -> String {
    let some_string = String::from("I will generate a string");
    some_string
}