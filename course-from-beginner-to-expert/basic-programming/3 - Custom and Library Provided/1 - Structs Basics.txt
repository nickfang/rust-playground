// -------------------------------------------
// 	Structs and its Types
// -------------------------------------------

struct Car {
    owner: String,
    year: u32,
    fuel_level: f32,
    price: u32,
}
fn main() {
    let mut my_car = Car {
        owner: String::from("ABC"),
        year: 2010,
        fuel_level: 0.0,
        price: 5_000,
    };
    let car_year = my_car.year;
    my_car.fuel_level = 30.0;
    let extracted_owner = my_car.owner.clone();
    println!("Owner is: {}", my_car.owner);

    let another_car = Car {
        owner: "new_name".to_string(),
        ..my_car
    };

    //println!("Owner is: {}", my_car.owner);

    // Tuple Structs
    let point_2D = (1, 3);
    let point_3D = (4, 10, 13);

    struct Point_2D(i32, i32);
    struct Point_3D(i32, i32, i32);

    let point1 = Point_2D(1, 3);
    let point2 = Point_3D(4, 10, 13);

    // Unit Struct
    struct ABC;
}



//Problem 1: Modify the code by eliminating all the let statements
struct Fruit {
    apples: i32,
    bananas: i32,
}

fn increase_fruit(fruit: Fruit) -> Fruit {
    let fruit = Fruit {
        apples: fruit.apples * 2,
        bananas: fruit.bananas * 3,
    };
    fruit
}

fn new_fruit() -> Fruit {
    let fruit = Fruit {
        apples: 10,
        bananas: 5,
    };
    fruit
}

fn print_fruit(fruit: Fruit) {
    println!(
        "You have {} apples and {} bananas",
        fruit.apples, fruit.bananas
    );
}

fn main() {
    let some_fruit = new_fruit();
    let updated_fruit = increase_fruit(some_fruit);
    print_fruit(updated_fruit);
}

// Solution:
struct Fruit {
    apples: i32,
    bananas: i32,
}

fn increase_fruit(fruit: Fruit) -> Fruit {
    Fruit {
        apples: fruit.apples * 2,
        bananas: fruit.bananas * 3,
    }
}

fn new_fruit() -> Fruit {
    Fruit {
        apples: 10,
        bananas: 5,
    }
}

fn print_fruit(fruit: Fruit) {
    println!(
        "You have {} apples and {} bananas",
        fruit.apples, fruit.bananas
    );
}

fn main() {
    print_fruit(increase_fruit(new_fruit()));
}

// Problem 2: Fix the code by only changing the indicated line.
struct Book {
    title: String,
    author: String,
}

fn main() {
    let some_book = Book {
        title: String::from("The Rust Programming Language"),
        author: String::from("Steve Klabnik and Carol Nichols"),
    };
    print_book(some_book.title); // Fix this line

    println!("Book name: {}", some_book.title);
}

fn print_book(book_name: String) {
    println!("Book: {}", book_name);
}
//Solution:
struct Book {
    title: String,
    author: String,
}

fn main() {
    let some_book = Book {
        title: String::from("The Rust Programming Language"),
        author: String::from("Steve Klabnik and Carol Nichols"),
    };
    print_book(some_book.title.clone()); // Fix this line

    println!("Book name: {}", some_book.title);
    println!("Book author: {}", some_book.author);
}

fn print_book(book_name: String) {
    println!("Book: {}", book_name);
}
