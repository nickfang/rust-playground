// -------------------------------------------
// 			Exporting and Privacy in Modules
// -------------------------------------------
use my_package::{Category, Customer, Order, Product};

fn main() {
    let product = Product::new(1, String::from("Laptop"), 799.99, Category::Electronics);
    let customer = Customer::new(1, String::from("Alice"), String::from("alice@example.com"));
    let order = Order::new(1, product, customer, 2);
    println!("Total cost of the order: ${}", order.total_bill());
}

// Problem 1: Complete the code by bringing the required items into scope.
mod seasons {
    pub enum Season {
        Spring,
        Summer,
        Autumn,
        Winter,
    }

    pub fn is_holiday(season: &Season) -> bool {
        match season {
            Season::Summer => true,
            _ => false,
        }
    }
}

fn main() {
    let current_season = Season::Autumn;
    if is_holiday(&current_season) {
        println!("It's a holiday season! Time for a vacation!");
    } else {
        println!("Regular work season. Keep hustling!");
    }
}
// Solution
mod seasons {
    pub enum Season {
        Spring,
        Summer,
        Autumn,
        Winter,
    }

    pub fn is_holiday(season: &Season) -> bool {
        match season {
            Season::Summer => true,
            _ => false,
        }
    }
}

use seasons::{is_holiday, Season};
fn main() {
    let current_season = Season::Autumn;
    if is_holiday(&current_season) {
        println!("It's a holiday season! Time for a vacation!");
    } else {
        println!("Regular work season. Keep hustling!");
    }
}

//Problem #2: Fix the code below so that it compiles.
mod University {
    pub struct Student {
        name: String,
        marks: u8,
        grade: char,
    }
}

use University::Student;

fn main() {
    let mut student_1 = Student {
        name: String::from("Alice"),
        marks: 75,
        grade: 'A',
    };
    println!("{} got {} grade", student_1.name, student_1.grade);
}
// Solution:
mod University {
    pub struct Student {
        pub name: String, // fields need to be made public
        pub marks: u8,
        pub grade: char,
    }
}

use University::Student;

fn main() {
    let mut student_1 = Student {
        name: String::from("Alice"),
        marks: 75,
        grade: 'A',
    };
    println!("{} got {} grade", student_1.name, student_1.grade);
}

// Problem #3: Re-export the items properly so that the code compiles
mod graphics {

    // Re-export the 'show_area' function for easier access
    // Re-export the 'calculate_area' function for easier access

    pub mod shapes {
        pub fn calculate_area(radius: f64) -> f64 {
            std::f64::consts::PI * radius * radius
        }
    }
    pub mod display {
        pub fn show_area(shape: &str, area: f64) {
            println!("The area of the {} is: {}", shape, area);
        }
    }
}

use ___::calculate_area; // fix this line
use ___::show_area; // fix this line
fn main() {
    let radius = 3.0;
    let area = calculate_area(radius);

    show_area("circle", area);
}
// Solution
mod graphics {

    // Re-export the 'show_area' function for easier access
    // Re-export the 'calculate_area' function for easier access

    pub mod shapes {
        pub fn calculate_area(radius: f64) -> f64 {
            std::f64::consts::PI * radius * radius
        }
    }
    pub mod display {
        pub fn show_area(shape: &str, area: f64) {
            println!("The area of the {} is: {}", shape, area);
        }
    }
}

use graphics::shapes::calculate_area; // fix this line
use graphics::display::show_area; // fix this line
fn main() {
    let radius = 3.0;
    let area = calculate_area(radius);

    show_area("circle", area);
}
